{"description": "A web server's access log needs to be audited. Count the number of unique IP addresses that have accessed the server, based on the `access.log` file.","setup_commands": ["touch access.log", "echo '192.168.1.1 - - [10/Oct/2023:13:55:36 +0000] \"GET /index.html HTTP/1.1\" 200 1070' >> access.log", "echo '10.0.0.5 - - [10/Oct/2023:13:56:12 +0000] \"GET /style.css HTTP/1.1\" 200 512' >> access.log", "echo '192.168.1.1 - - [10/Oct/2023:13:57:01 +0000] \"GET /script.js HTTP/1.1\" 200 2048' >> access.log", "echo '172.16.0.10 - - [10/Oct/2023:13:58:22 +0000] \"POST /api/data HTTP/1.1\" 201 50' >> access.log", "echo '10.0.0.5 - - [10/Oct/2023:13:59:00 +0000] \"GET /index.html HTTP/1.1\" 200 1070' >> access.log"]}
{"description": "The application is creating temporary cache files that are not being cleaned up. Find and delete all files in the `/tmp/app_cache` directory and its subdirectories that are larger than 1 megabyte.","setup_commands": ["mkdir -p /tmp/app_cache/images /tmp/app_cache/data", "touch /tmp/app_cache/small_file.txt", "dd if=/dev/zero of=/tmp/app_cache/data/large_cache_file.bin bs=1M count=2", "dd if=/dev/zero of=/tmp/app_cache/images/another_large.img bs=1024 count=1025", "dd if=/dev/zero of=/tmp/app_cache/small_cache.dat bs=1K count=100"]}
{"description": "A developer needs to revert a configuration change. In the 'webapp' git repository, find the commit hash of the commit with the message 'Update database configuration' and display it.","setup_commands": ["git init webapp", "cd webapp", "touch initial.txt", "git add .", "git config user.email 'test@example.com' && git config user.name 'Test User'", "git commit -m 'Initial commit'", "echo 'DB_HOST=localhost' > config.ini", "git add .", "git commit -m 'Update database configuration'", "echo 'FEATURE_FLAG=true' >> config.ini", "git add .", "git commit -m 'Enable new feature'", "cd .."]}
{"description": "A configuration file at `/etc/app/config.conf` contains a placeholder API key. Find the line starting with `API_KEY=` and replace its value with `new_secret_key_123`.", "setup_commands": ["mkdir -p /etc/app", "echo -e 'USERNAME=admin\\nAPI_KEY=placeholder\\nENDPOINT=https://api.example.com' > /etc/app/config.conf"]}
{"description": "You need to update all configuration files. Find all files with the `.conf` extension in the `/etc/service` directory and replace every occurrence of the string `api_version=v1` with `api_version=v2`.","setup_commands": ["mkdir -p /etc/service/auth /etc/service/payment", "echo -e '[general]\napi_version=v1\nuser=service_user' > /etc/service/auth/settings.conf", "echo -e '[database]\nhost=db.local\napi_version=v1' > /etc/service/payment/config.conf", "echo 'some_other_setting=true' > /etc/service/payment/features.conf"]}
{"description": "Fetch a list of public repositories for the 'octocat' user from the GitHub API and extract the 'full_name' of each repository.","setup_commands": []}
{"description": "A deployment script needs to be made executable by its owner and group, but not by others. Set the permissions of the `deploy.sh` file to `rwxr-x---`.","setup_commands": ["touch deploy.sh", "chmod 600 deploy.sh"]}
{"description": "To prepare for a release, create a gzipped tar archive named `release-v1.2.0.tar.gz` containing the entire contents of the `src` directory.","setup_commands": ["mkdir -p src/app src/lib", "touch src/main.go", "touch src/app/handlers.go", "touch src/lib/utils.go"]}
{"description": "A log file `system.log` contains lines prefixed with log levels like 'INFO:', 'WARN:', and 'ERROR:'. Display only the lines that contain 'ERROR:', but without showing the 'ERROR: ' prefix itself.","setup_commands": ["touch system.log", "echo 'INFO: System startup complete.' >> system.log", "echo 'WARN: Disk space is running low.' >> system.log", "echo 'ERROR: Failed to connect to database.' >> system.log", "echo 'INFO: User authentication successful.' >> system.log", "echo 'ERROR: Null pointer exception at module_x.' >> system.log"]}
{"description": "The project `my-app` has several files that were modified but not yet staged for the next commit. List these modified, unstaged files.","setup_commands": ["git init my-app && cd my-app && git config user.email 'test@example.com' && git config user.name 'Test User' && echo 'Hello' > README.md && echo 'var x = 1;' > app.js && git add . && git commit -m 'Initial commit' && echo 'Hello World' > README.md && echo 'var x = 2;' > app.js", "touch new_file.txt", "git add new_file.txt", "cd .."]}
{"description": "Download the file from the URL `https://raw.githubusercontent.com/deathbyknowledge/shellm/main/README.md` using `wget` or `curl`, and then count the number of lines in the downloaded file.", "setup_commands": []}
{"description": "In the `downloads` directory, all files with a `.JPEG` extension (uppercase) need to be standardized to a `.jpeg` extension (lowercase). Find and rename them accordingly.","setup_commands": ["mkdir downloads", "touch downloads/photo1.JPEG", "touch downloads/image_02.jpeg", "touch downloads/family_photo.JPEG"]}
{"description": "Create a new directory structure for a user's home directory: `~/documents/work` and `~/documents/personal/photos`. The command should work even if `~/documents` does not exist.","setup_commands": ["rm -rf ~/documents"]}
{"description": "A configuration file `app.properties` uses 'key=value' format. Extract the value of the `database.url` property.","setup_commands": ["echo -e 'server.port=8080\ndatabase.url=jdbc:postgresql://localhost:5432/prod_db\nlogging.level=INFO' > app.properties"]}
{"description": "You need to download an installation script from a URL and save it to the current directory as `install.sh`. The URL is `https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash`.","setup_commands": []}
{"description": "The `/var/log` directory contains many log files. Find and display the path of the 10 most recently modified files in this directory and its subdirectories.","setup_commands": ["mkdir -p /var/log/apache2 /var/log/sys", "touch /var/log/syslog", "sleep 1", "touch /var/log/auth.log", "sleep 1", "touch /var/log/apache2/access.log", "sleep 1", "touch /var/log/apache2/error.log", "for i in {1..10}; do touch /var/log/sys/oldlog_$i; done"]}
{"description": "From the provided CSV file `users.csv`, extract the email address (the 3rd column) of every user whose city (4th column) is 'New York'. Do not include the header row in the output.","setup_commands": ["echo 'id,name,email,city\n1,John Doe,john.doe@email.com,Los Angeles\n2,Jane Smith,jane.s@email.com,New York\n3,Peter Jones,p.jones@email.com,New York\n4,Mary Brown,mary@email.com,Chicago' > users.csv"]}
{"description": "A monitoring script has outputted a file `pids.txt` containing a list of process IDs, one per line. Terminate all processes whose PIDs are listed in this file.","setup_commands": ["echo \"\" > pids.txt", "sleep 60 & echo $! >> pids.txt", "sleep 60 & echo $! >> pids.txt", "sleep 60 & echo $! >> pids.txt"]}
{"description": "Find all directories inside `/usr/share/doc` (but not its subdirectories, i.e., at a max depth of 1) that have a name starting with the letter 'g'.","setup_commands": ["mkdir -p /usr/share/doc/grep /usr/share/doc/gzip /usr/share/doc/findutils /usr/share/doc/gawk /usr/share/doc/coreutils/deep", "touch /usr/share/doc/README"]}
{"description": "Using `curl` and `jq`, fetch the list of posts from `https://jsonplaceholder.typicode.com/posts` and count how many posts have a `userId` of 5.","setup_commands": []}